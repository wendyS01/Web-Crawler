Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
	Answer: The main reason is that the profiler measured the total time spent
	in the parse() method among all threads, so when using ParallelWebCrawler,it
	 will tell us the total time of the parse() method called by multi-threads.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

	Answer: This may because when this old computer provides enough memory to execute the big task sequential web crawler while the parallel crawler takes the time to break down the task, compute it with just a single thread, and then merge the results. So parallel crawler also needs additional time to decompose tasks and merge results, so with the same deadline, parallel crawler will visit fewer URLs

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
	Answer: This may because when this computer provides limited memory, the sequential web crawler will require more memory than the computer provided, so it may time out with less url visited. And parallel crawler will break down the task and each task allocated less memory than the computer provided, so it may visit more urls


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
	Answer: It will tell us the performances of SequentialWebCrawler and ParallelWebCrawler and if it is worth to implement ParallelWebCrawler.
    (b) What are the join points of the Profiler in the web crawler program?
	The methods with "@Profiled" annotation

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.
	
Answer: 
1. Dependency Injection is used in WebCrawlerMain class. When using dependency injection, objects are given their dependencies at run time rather than compile time. So we can change the objects that we needed at compile time. But disadvantages of dependency injection is that it requires extra configuration (annotations or XML) and can make code harder to understand and debug.

2. Abstract Factory is used in PageParserFactory.java (interface) and PageParserFactoryImpl.java. It can hide construction details from callers and encapsulate construction of several related objects into a single Java interface. But it may make code harder to understand.

3. Builder is used in CrawlerConfiguration.java and CrawlResult.java. Using builder can construct the state of a to-be-created object, property by property, and then builds the object. But after applying Builder, it may affect the readability of code.


